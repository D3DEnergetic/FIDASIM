#!/usr/bin/env python

import argparse
import os
import re
import tempfile
from subprocess import call
import string

def chunk(lst,n):
    return [ lst[i::n] for i in range(n) if lst[i::n] ]

def main():
    parser = argparse.ArgumentParser(description="Creates a FIDASIM PBS job script and submits it using qsub")

    parser.add_argument('path',
                        help='Namelist file or result directory')
    parser.add_argument('-w','--walltime',
                        default = '5:00:00',
                        help = 'Set walltime. Defaults to 5:00:00')
    parser.add_argument('-n','--nodes',
                        type=int,default = 1,
                        help = 'Set number of nodes. Defaults to 1')
    parser.add_argument('-ppn',
                        type=int,default = 8,dest='ppn',
                        help = 'Set processors per node. Defaults to 8')
    parser.add_argument('-mem','--memory',
                        default = '2gb',
                        help = 'Set required memory. Defaults to 2048mb')
    parser.add_argument('-ex','--executable',
                        default = os.path.normpath(os.environ['FIDASIM_DIR']+'/fidasim'),
                        help = 'Set path to FIDASIM executable. Defaults to '+os.path.normpath(os.environ['FIDASIM_DIR']+'/fidasim'))
    parser.add_argument('-log',
                        default = '',
                        help = 'Set log directory. Defaults to result directory.')
    parser.add_argument('-pbs',
                        action = 'append',
                        default = [],
                        help = 'Additional PBS directive')
    parser.add_argument('-pre','--precall',
                        action = 'append',
                        default = [],
                        help = 'Command to run before code execution')
    parser.add_argument('-post','--postcall',
                        action = 'append',
                        default = [],
                        help = 'Command to run after code execution')
    parser.add_argument('-rids','--runids',
                        default = '',
                        nargs='+',
                        help = 'List of run ids, accepts regex')
    parser.add_argument('-j','--jobs',
                        type=int,default = 0,
                        help = 'Split runs into N jobs. Defaults to 1 job per namelist')
    parser.add_argument('-c','--clobber',
                        action = 'store_true',
                        help = 'Overwrite existing runs')
    parser.add_argument('-v','--verbose',
                        action = 'store_true',
                        help = 'Verbose')
    parser.add_argument('-db','--debug',
                        action = 'store_true',
                        help = 'Debug mode. Does not submit job')

    args = parser.parse_args()

    if args.verbose:
        print('Walltime: '+args.walltime)
        print('Nodes:    '+str(args.nodes))
        print('PPN:      '+str(args.ppn))
        print('Memory:   '+args.memory)

    fileordir = os.path.abspath(args.path)

    if not os.access(fileordir, os.W_OK):
        print('\033[91m'+'ERROR: You do not have write permissions in this directory. Either change the permissions or move the input files into a new directory and edit the *_inputs.dat file accordingly.'+'\033[0m') 
        quit()
        
    if not os.access(fileordir, os.R_OK):
        print('\033[91m'+'ERROR: You do not have read permissions in this directory. Either change the permissions or move the input files into a new directory and edit the *_inputs.dat file accordingly.'+'\033[0m') 
        quit()
        
    if os.path.isfile(fileordir):
        files=[fileordir]
    elif os.path.isdir(fileordir):
        allfiles = os.listdir(fileordir)
        if args.runids:
             files=[fileordir + '/' + f for f in allfiles for r in args.runids if re.search(r+'_inputs\.dat',f)]
        else:
             files=[fileordir+'/'+ f for f in allfiles if re.search('.*_inputs\.dat',f)]

        if not args.clobber:
            sfiles=[fileordir+'/'+ f for f in allfiles if re.search('.*_spectra\.(cdf|h5)',f)]
            frids = ['_'.join(os.path.basename(f).split(".")[0].split("_")[0:-1]) for f in files]
            srids = ['_'.join(os.path.basename(f).split(".")[0].split("_")[0:-1]) for f in sfiles]
            files = [fileordir+'/'+f+'_inputs.dat' for f in set(frids).difference(srids)]
    else:
        raise IOError('Not a file or directory')

    if not args.jobs:
        jobs = chunk(files,len(files))
    else:
        jobs = chunk(files,args.jobs)

    for job in jobs:
        if not args.log:
            log_dir = os.path.dirname(job[0])
        else:
            log_dir = args.log

        output_files = ['_'.join(os.path.basename(file).split(".")[0].split("_")[0:-1])+".out" for file in job]

        args_dict =  {'commands':"\n".join([args.executable+" "+z[0]+" >& "+log_dir+"/"+z[1] for z in zip(job,output_files)]),
                      'nodes':str(args.nodes),
                      'ppn':str(args.ppn),'mem':args.memory,
                      'walltime':args.walltime,
                      'pbs':"\n".join(item for item in args.pbs),
                      'precall':"\n".join(item for item in args.precall),
                      'postcall':"\n".join(item for item in args.postcall),
                      'job_name':'fidasim'}

        pbs_script = """
                     #!/bin/tcsh
                     #PBS -N %(job_name)s
                     #PBS -l nodes=%(nodes)s:ppn=%(ppn)s
                     #PBS -l mem=%(mem)s
                     #PBS -l walltime=%(walltime)s
                     #PBS -r n
                     #PBS -V
                     #PBS -o /dev/null
                     #PBS -e /dev/null
                     %(pbs)s

                     echo " "
                     echo "-------------------"
                     echo "This is a $PBS_ENVIRONMENT job"
                     echo "This job was submitted to the queue: $PBS_QUEUE"
                     echo "The job's id is: $PBS_JOBID"
                     echo "-------------------"
                     echo "The master node of this job is: $PBS_O_HOST"

                     set NPROCS=`wc -l < $PBS_NODEFILE`

                     set NNODES=`uniq $PBS_NODEFILE | wc -l`

                     echo "This job is using $NPROCS CPU(s) on the following $NNODES node(s):"
                     echo "-----------------------"
                     uniq $PBS_NODEFILE | sort
                     echo "-----------------------"

                     echo -n 'Started job at : ' ; date

                     %(precall)s

                     %(commands)s

                     %(postcall)s

                     echo -n 'Ended job at  : ' ; date
                     echo " "

                     exit
                     """%args_dict

        if args.verbose:
            print('Submitting: \n\t'+'\n\t'.join(file for file in job))

        if not args.debug:
            tfile = tempfile.NamedTemporaryFile(mode='w+t',dir=os.path.expanduser("~"))
            tfile.file.write("\n".join([line.lstrip() for line in pbs_script.splitlines()]))
            tfile.file.close()
            call(['qsub',tfile.name])
            tfile.close()
        else: print("\n".join([item.lstrip() for item in pbs_script.splitlines()]))

if __name__=='__main__':
    main()
