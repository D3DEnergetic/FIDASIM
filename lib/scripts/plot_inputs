#!/usr/bin/env python

# Import libraries
import argparse
import matplotlib.pyplot as plt
import matplotlib as mpl
from mpl_toolkits.mplot3d import Axes3D
from mpl_toolkits.mplot3d.art3d import Poly3DCollection
from scipy.linalg import norm
import h5py as h5
import numpy as np
import os

try:
    f90 = True
    import f90nml   # Portal does not have f90nml capabilities
except:
    f90 = False
    print('Warning: f90nml library not found. Beam grid will NOT be plotted')

# Define functions needed for beam grid transformations
def tb_zyx(alpha, beta, gamma):
    # Refer to utils.py for more documentation
    sa = np.sin(alpha)
    ca = np.cos(alpha)
    sb = np.sin(beta)
    cb = np.cos(beta)
    sg = np.sin(gamma)
    cg = np.cos(gamma)
    r = np.zeros((3, 3))
    r[0, 0] = ca * cb
    r[0, 1] = ca * sb * sg - cg * sa
    r[0, 2] = sa * sg + ca * cg * sb
    r[1, 0] = cb * sa
    r[1, 1] = ca * cg + sa * sb * sg
    r[1, 2] = cg * sa * sb - ca * sg
    r[2, 0] = -sb
    r[2, 1] = cb * sg
    r[2, 2] = cb * cg
    return r
def xyz_to_uvw(alpha, beta, gamma, xyz, origin = np.zeros(3)):
    # Refer to utils.py for more documentation
    xyz = np.array(xyz)
    if xyz.ndim == 2:
        s = xyz.shape
        if s[0] != 3:
            raise ValueError('xyz must be (3, n), but it has shape {}'.format(uvw.shape))
        n = s[1]
    elif xyz.ndim == 1:
        if xyz.size != 3:
            raise ValueError('xyz must have length 3, but it has length {}'.format(uvw.size))
        n = 1
    else:
        raise ValueError('xyz must be (3) or (3, n)')

    if origin.ndim != 1:
        raise ValueError('origin must be 1D, but it has shape {}'.format(origin.shape))

    if origin.size != 3:
        raise ValueError('origin must have length 3, but it has length {}'.format(origin.size))
    R = tb_zyx(alpha,beta,gamma)
    uvw = np.dot(R, xyz)
    return uvw + np.squeeze(np.tile(origin, (n, 1)).T)


def main():
    parser = argparse.ArgumentParser(description="Plots FIDASIM inputs")

    parser.add_argument('directory',
                        help='Directory that contains FIDASIM input files')
    parser.add_argument('runid',
                        help='FIDASIM run ID')
    parser.add_argument('-g','--geometry',
                        action='store_true',
                        help='Plot geometry')
    parser.add_argument('-p','--plasma',
                        action='store_true',
                        help='Plot plasma parameters')
    parser.add_argument('-f','--fields',
                        action='store_true',
                        help='Plot electromagnetic fields')
    parser.add_argument('-d','--distribution',
                        action='store_true',
                        help='Plot fast-ion distribution')
    parser.add_argument('-rz','--rzlineout',
                        type=float,
                        help='Plot line-out along r value on z-r selected contours figures (unit in centimeters)')
    parser.add_argument('-zr','--zrlineout',
                        type=float,
                        help='Plot line-out along z value on z-r selected contour figures (unit in centimeters)')
    parser.add_argument('-ze','--zelineout',
                        type=float,
                        help='Plot line-out along z value on z-energy distribution contour figure (unit in centimeters)')
    parser.add_argument('-ez','--ezlineout',
                        type=float,
                        help='Plot line-out along e value on z-energy distribution contour figure (unit in keV)')
    parser.add_argument('-re','--relineout',
                        type=float,
                        help='Plot line-out along r value on energy-r distribution contour figure (unit in centimeters)')
    parser.add_argument('-er','--erlineout',
                        type=float,
                        help='Plot line-out along e value on energy-r distribution contour figure (unit in keV)')
    parser.add_argument('-zp','--zplineout',
                        type=float,
                        help='Plot line-out along z value on z-pitch distribution contour figure (unit in centimeters)')
    parser.add_argument('-pz','--pzlineout',
                        type=float,
                        help='Plot line-out along p value on z-pitch distribution contour figure')
    parser.add_argument('-rp','--rplineout',
                        type=float,
                        help='Plot line-out along r value on pitch-r distribution contour figure (unit in centimeters)')
    parser.add_argument('-pr','--prlineout',
                        type=float,
                        help='Plot line-out along p value on pitch-r distribution contour figure')
    parser.add_argument('-ep','--eplineout',
                        type=float,
                        help='Plot line-out along e value on pitch-energy distribution contour figure (unit in meters)')
    parser.add_argument('-pe','--pelineout',
                        type=float,
                        help='Plot line-out along p value on pitch-energy distribution contour figure')
    parser.add_argument('-l','--legend',
                        default = True, action='store_false',
                        help='Turns off the legend')

    args = parser.parse_args()


    plot_all = (not args.geometry) and (not args.plasma) and (not args.fields) and (not args.distribution)

### Test this
    # Read hdf5 files
    if (f90 and args.geometry) or plot_all:
        try:
            nml_file = os.path.join(args.directory, args.runid+'_inputs.dat')
            nml = f90nml.read(nml_file)['fidasim_inputs']
        except:
            print('Error: Double check your directory, runid and/or path. The inputs file was not found')
            raise SystemExit
    if args.geometry or plot_all:
        try:
            geo_file = os.path.join(args.directory, args.runid+'_geometry.h5')
            geo = h5.File(geo_file, 'r')
        except:
            print('Error: Double check your directory, runid and/or path. The geometry file was not found')
            raise SystemExit
    if args.plasma or args.fields or args.geometry or args.distribution or plot_all:
        try:
            eq_file = os.path.join(args.directory, args.runid+'_equilibrium.h5')
            eq = h5.File(eq_file, 'r')
        except:
            print('Error: Double check your directory, runid and/or path. The equilibrium file was not found')
            raise SystemExit
    if args.distribution or plot_all:
        try:
            dist_file = os.path.join(args.directory, args.runid+'_distribution.h5')
            dist = h5.File(dist_file, 'r')
        except:
            print('Error: Double check your directory, runid and/or path. The distribution file was not found')
            raise SystemExit

    # Define the limiting mask
    if args.fields or args.plasma or args.distribution or plot_all:
        pmask = eq["/plasma/mask"].value
        fmask = eq["/fields/mask"].value
        mask = np.multiply(pmask, fmask)

    # Error checks for attempting to simultaneously plot two line outs on the same figure
    if args.eplineout is not None and args.pelineout is not None:
        print('Error: Cannot plot both ep and pe line outs. Pick one only')
        raise SystemExit
    if args.erlineout is not None and args.relineout is not None:
        print('Error: Cannot plot both er and re line outs. Pick one only')
        raise SystemExit
    if args.prlineout is not None and args.rplineout is not None:
        print('Error: Cannot plot both pr and rp line outs. Pick one only')
        raise SystemExit
    if args.zelineout is not None and args.ezlineout is not None:
        print('Error: Cannot plot both ez and ze line outs. Pick one only')
        raise SystemExit
    if args.zplineout is not None and args.pzlineout is not None:
        print('Error: Cannot plot both pz and zp line outs. Pick one only')
        raise SystemExit
    if args.rzlineout is not None and args.zrlineout is not None: 
        print('Error: Cannot plot both rz and zr line outs. Pick one only')
        raise SystemExit

    # Define lineout flags that will be called in the big plot distribution loop
    lout_flag = {}
    if args.eplineout is not None or args.pelineout is not None:
        lout_flag['pitchenergy'] = [args.pelineout, args.eplineout]
    if args.erlineout is not None or args.relineout is not None:
        lout_flag['energyr'] = [args.erlineout, args.relineout]
    if args.prlineout is not None or args.rplineout is not None:
        lout_flag['pitchr'] = [args.prlineout, args.rplineout]
    if args.zelineout is not None or args.ezlineout is not None:
        lout_flag['zenergy'] = [args.zelineout, args.ezlineout]
    if args.zplineout is not None or args.pzlineout is not None:
        lout_flag['zpitch'] = [args.zplineout, args.pzlineout]
    if args.zrlineout is not None or args.rzlineout is not None:
        lout_flag['zr'] = [args.zrlineout, args.rzlineout]

    # Plot geometry
    if args.geometry or plot_all:

        r = eq["/plasma/r"].value
        z = eq["/plasma/z"].value
        rmin, rmax = np.min(r),np.max(r)
        zmin, zmax = np.min(z),np.max(z)

        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        ax.set_aspect('equal')

        # Define beam grid parameters
        if f90:
            angles = np.array([nml['alpha'], nml['beta'], nml['gamma']])
            xlist = [nml['xmin'], nml['xmax']]
            ylist = [nml['ymin'], nml['ymax']]
            zlist = [nml['zmin'], nml['zmax']]
            xyz_vertices = []
            for x in xlist:
                for y in ylist:
                    for z in zlist:
                        xyz_vertices.append([x, y, z])
            xyz_vertices = np.array(xyz_vertices)
            uvw_vertices = []
            for i in range(len(xyz_vertices)):
                uvw_vertices.append(xyz_to_uvw(angles[0], angles[1], angles[2], xyz_vertices[i], origin = np.array(nml['origin'])))
            uvw_vertices = np.array(uvw_vertices)
            uvw_origin = np.array(nml['origin'])

        # Plot neutral beam
        if 'nbi' in geo:
            src = geo['nbi/src'].value
            mag = 2000
            t = np.linspace(0,mag,2)
            axis = geo['nbi/axis'].value
            # Plot beam axis
            centerline = src + t.reshape(2,1)*axis
            ax.plot(centerline[:,0],centerline[:,1],centerline[:,2],color='red')
            ax.text(centerline[0,0],centerline[0,1],centerline[0,2],'NBI',color='red')
            # Plot beam
            origin = np.array([0, 0, 0])
            ry = geo['nbi/awidy'].value
            rz = geo['nbi/awidz'].value
            not_axis = np.array([1, 0, 0])   #Create new axes coordinate system
            if (np.cross(axis,not_axis)==0).all():
                not_axis = np.array([0, 1, 0])
            n1 = np.cross(axis, not_axis)
            n1 /= norm(n1)
            n2 = np.cross(axis, n1)

            t = np.linspace(0, mag, 2)
            theta = np.linspace(0, 2 * np.pi, 1000)
            t, theta = np.meshgrid(t, theta)
            u, v, w = [centerline[0,i] + axis[i] * t + rz * np.sin(theta) * n1[i] +
                    ry * np.cos(theta) * n2[i] for i in [0, 1, 2]]
            # Plot
            ax.plot_surface(u, v, w, color='white',alpha=0.1)
            if f90:
                # Beam Grid
                # Plot beam grid origin
                ax.scatter3D(uvw_origin[0], uvw_origin[1], uvw_origin[2], s=25, c='darkgreen')
                # Plot vertices
                ax.scatter3D(uvw_vertices[:, 0], uvw_vertices[:, 1], uvw_vertices[:, 2], s=1, c='darkgreen')
                verts = [[uvw_vertices[0],uvw_vertices[1],uvw_vertices[3],uvw_vertices[2]],
                        [uvw_vertices[4],uvw_vertices[5],uvw_vertices[7],uvw_vertices[6]],
                        [uvw_vertices[0],uvw_vertices[1],uvw_vertices[5],uvw_vertices[4]],
                        [uvw_vertices[2],uvw_vertices[3],uvw_vertices[7],uvw_vertices[6]],
                        [uvw_vertices[5],uvw_vertices[1],uvw_vertices[3],uvw_vertices[7]],
                        [uvw_vertices[4],uvw_vertices[6],uvw_vertices[2],uvw_vertices[0]],]
                # Plot sides
                ax.add_collection3d(Poly3DCollection(verts, facecolors='lime', linewidths=1, edgecolors='darkgreen', alpha=0.1))

        # Plot machine min/max major radius
        th = np.linspace(0,2*np.pi,100)
        xrmax = rmax*np.cos(th)
        xrmin = rmin*np.cos(th)
        yrmax = rmax*np.sin(th)
        yrmin = rmin*np.sin(th)
        zr = 0.0*xrmax
        ax.plot(xrmax,yrmax,zr,color='black')
        ax.plot(xrmin,yrmin,zr,color='black')

        # Plot FIDA and NPA chords
        if 'npa' in geo:
            n_nchan = geo['/npa/nchan'].value
        else:
            n_nchan = 0

        if 'spec' in geo:
            f_nchan = geo['/spec/nchan'].value
        else:
            f_nchan = 0

        if n_nchan + f_nchan > 0:
            colors = plt.cm.jet(np.linspace(0,1,n_nchan+f_nchan))
        t = np.linspace(0,2.1*rmax,2)

        if 'spec' in geo:
            for i in range(f_nchan):          # FIDA loop
                lens = geo['/spec/lens'].value[i,:]
                axis = geo['/spec/axis'].value[i,:]
                los = lens + t.reshape(2,1)*axis
                ax.plot(los[:,0],los[:,1],los[:,2],color=colors[i],label = "FIDA Ch. {0}".format(i+1))
        if 'npa' in geo:
            for i in range(n_nchan):          # NPA loop
                d_cent = geo['/npa/d_cent'].value[i,:]
                a_cent = geo['/npa/a_cent'].value[i,:]
                axis = a_cent - d_cent
                axis /= np.sqrt(axis[0]**2 + axis[1]**2 + axis[2]**2)
                los = d_cent + t.reshape(2,1)*axis
                ax.plot(los[:,0],los[:,1],los[:,2],color=colors[i+f_nchan],label = "NPA Ch. {0}".format(i+1))

        # Set axes limits for an equal aspect ratio visualization
        X = np.array([-rmax,rmax])
        Y = np.array([-rmax,rmax])
        Z = np.array([-zmax,zmax])
        max_range = np.array([X.max()-X.min(), Y.max()-Y.min(), Z.max()-Z.min()]).max() / 2.0
        mid_x = (X.max()+X.min()) * 0.5
        mid_y = (Y.max()+Y.min()) * 0.5
        mid_z = (Z.max()+Z.min()) * 0.5
        ax.set_xlim(mid_x - max_range, mid_x + max_range)
        ax.set_ylim(mid_y - max_range, mid_y + max_range)
        ax.set_zlim(mid_z - max_range, mid_z + max_range)
        ax.set_xlabel('X (cm)')
        ax.set_ylabel('Y (cm)')
        ax.set_zlabel('Z (cm)')
        if n_nchan + f_nchan > 0 and args.legend:
            l = ax.legend(ncol=2,loc=0)
            for i, txt in enumerate(l.get_texts()):
                txt.set_color(colors[i])
        fig.canvas.set_window_title('Geometry')

    if args.plasma or plot_all:

        r = eq["/plasma/r"].value
        z = eq["/plasma/z"].value
        if args.rzlineout is not None:
            ri = np.abs(r-args.rzlineout).argmin()       # R lineout index
        if args.zrlineout is not None:
            zi = np.abs(z-args.zrlineout).argmin()       # Z lineout index

        #Interpolation grid ranges
        rmin, rmax = np.min(r),np.max(r)
        zmin, zmax = np.min(z),np.max(z)

        # Plot Electron Temperature
        to_plt = ['te','ti','dene','denn','zeff']
        labels = ['T$_{e}$ (keV)','T$_{i}$ (keV)','n$_e$ (cm$^{-3}$)','n$_n$ (cm$^{-3}$)','Z$_{eff}$']
        fig_labels = ['Te','Ti','ne','nn','Zeff']
        for i in range(len(to_plt)):
            plasma = eq["/plasma/"+to_plt[i]].value
            plasma_masked = np.ma.array(plasma)
            plasma_masked[mask < 0.5] = np.ma.masked
            if args.rzlineout is not None:
                # R line out plots
                fig, ax = plt.subplots(2,1,figsize=(4.8,9.6))
                ax = ax.flatten()
                linex = [r[ri], r[ri]]
                liney = [zmin, zmax]
                ax[0].plot(linex,liney,'b--')
                ax[1].plot(z,plasma_masked[:,ri], 'b')
                ax[1].set_xlabel("Z (cm)",fontsize="large")
                ax[1].set_ylabel(labels[i],fontsize="large")
            elif args.zrlineout is not None:
                # Z line out plots
                fig, ax = plt.subplots(2,1,figsize=(4.8,9.6))
                ax = ax.flatten()
                linex = [rmin, rmax]
                liney = [z[zi], z[zi]]
                ax[0].plot(linex,liney,'b--')
                ax[1].plot(r,plasma_masked[zi,:], 'b')
                ax[1].set_xlabel("R (cm)",fontsize="large")
                ax[1].set_ylabel(labels[i],fontsize="large")
            else:
                fig, ax = plt.subplots(figsize=(4.8,4.8))
                ax = np.array(ax)
                ax = ax.flatten()
            # Contour plot
            c = ax[0].contourf(r,z,plasma_masked,15,cmap="inferno")
            ax[0].set_xlim(rmin,rmax)
            ax[0].set_ylim(zmin,zmax)
            ax[0].set_xlabel("R (cm)",fontsize="large")
            ax[0].set_ylabel("Z (cm)",fontsize="large")
            ax[0].tick_params(direction="out",length=2)
            ax[0].set_title(labels[i],fontsize=20)
            fig.colorbar(c,shrink=0.87,format='%0.2e', ax=ax[0])

            fig.canvas.set_window_title(fig_labels[i])
            fig.tight_layout()

    # Plot fields
    if args.fields or plot_all:

        r = eq["/fields/r"].value
        z = eq["/fields/z"].value
        if args.rzlineout is not None:
            ri = np.abs(r-args.rzlineout).argmin()       # R lineout index
        if args.zrlineout is not None:
            zi = np.abs(z-args.zrlineout).argmin()       # Z lineout index

        # Interpolation grid ranges
        rmin, rmax = np.min(r),np.max(r)
        zmin, zmax = np.min(z),np.max(z)

        to_plt = ['br','bt','bz','er','et','ez']
        labels = ['B$_{r}$ (T)','B$_{t}$ (T)','B$_{z}$ (T)','E$_{r}$ (V/m)','E$_{t}$ (V/m)','E$_{z}$ (V/m)']
        fig_labels = ['Br','Bt','Bz','Er','Et','Ez']
        for i in range(len(to_plt)):
            fld = eq["/fields/"+to_plt[i]].value
            fld_masked = np.ma.array(fld)
            fld_masked[mask < 0.5] = np.ma.masked
            if args.rzlineout is not None:
                # R line out plots
                fig, ax = plt.subplots(2,1,figsize=(4.8,9.6))
                ax = ax.flatten()
                linex = [r[ri], r[ri]]
                liney = [zmin, zmax]
                ax[0].plot(linex,liney,'b--')
                ax[1].plot(z,fld_masked[:,ri], 'b')
                ax[1].set_xlabel("Z (cm)",fontsize="large")
                ax[1].set_ylabel(labels[i],fontsize="large")
            elif args.zrlineout is not None:
                # Z line out plots
                fig, ax = plt.subplots(2,1,figsize=(4.8,9.6))
                ax = ax.flatten()
                linex = [rmin, rmax]
                liney = [z[zi], z[zi]]
                ax[0].plot(linex,liney,'b--')
                ax[1].plot(r,fld_masked[zi,:], 'b')
                ax[1].set_xlabel("R (cm)",fontsize="large")
                ax[1].set_ylabel(labels[i],fontsize="large")
            else:
                fig, ax = plt.subplots(figsize=(4.8,4.8))
                ax = np.array(ax)
                ax = ax.flatten()
            # Contour plot
            c = ax[0].contourf(r,z,fld_masked,15,cmap="inferno")
            ax[0].set_xlim(rmin,rmax)
            ax[0].set_ylim(zmin,zmax)
            ax[0].set_xlabel("R (cm)",fontsize="large")
            ax[0].set_ylabel("Z (cm)",fontsize="large")
            ax[0].tick_params(direction="out",length=2)
            ax[0].set_title(labels[i],fontsize=20)
            fig.colorbar(c,shrink=0.87,format='%0.2e', ax=ax[0])
            fig.canvas.set_window_title(fig_labels[i])
            fig.tight_layout()


    if args.distribution or plot_all:

        # Fast-ion distibution function
        f = dist["f"].value
        ndim = f.ndim
        par = ['energy', 'pitch', 'r', 'z']
        units = [' (keV)', '', ' (cm)', ' (cm)']
        del_par = []
        par_data = {}
        lims_keys = ['min', 'max', 'units']
        lims_dict = {}

        for i in reversed(range(ndim)):
            p = dist[par[i]].value      # Read in f parameters
            dp = np.abs(p[1] - p[0])    # Create parameter intervals
            del_par.append(dp)
            par_data[par[i]] = p        # Store in dictionary for plots
            lims_vals = [np.min(p), np.max(p), units[i]]
            lims_dict[par[i]] = dict(zip(lims_keys, lims_vals))
            # Dictionary for units on plots

        par.reverse()                   # Python reads things in reverse
        for i in range(ndim-1):         # Loop over parameters
            a = par[:]                  # Copy parameter list
            del a[i]
            for j in range(i+1,ndim):
                f1 = np.trapz(f,dx=del_par[i],axis=i)
                f2 = np.trapz(f1,dx=del_par[j],axis=j-1)
                # Integrate indexed variables
                b = a[:]
                del b[j-1]              # Delete integrated variables
                if b[0] == 'r':
                    b[0] = b[1]
                    b[1] = 'r'
                    f2 = np.transpose(f2)
                if b[0] == 'z' and b[1] == 'r':
                    f2 = np.ma.array(f2)
                    f2[mask < 0.5] = np.ma.masked
                # Define x and y data to plot
                x = par_data[b[1]]
                y = par_data[b[0]]
                xmin, xmax = lims_dict[b[1]]['min'],lims_dict[b[1]]['max']
                ymin, ymax = lims_dict[b[0]]['min'],lims_dict[b[0]]['max']

                # Plot lineouts
                if b[0]+b[1] in lout_flag:
                    if lout_flag[b[0]+b[1]][1] is not None:
                        xi = np.abs(x-lout_flag[b[0]+b[1]][1]).argmin()       # X lineout index
                    if lout_flag[b[0]+b[1]][0] is not None:
                        yi = np.abs(y-lout_flag[b[0]+b[1]][0]).argmin()       # Y lineout index

                    if lout_flag[b[0]+b[1]][1] is not None:
                        # X line out plots
                        fig, ax = plt.subplots(2,1,figsize=(4.8,9.6))
                        ax = ax.flatten()
                        linex = [x[xi], x[xi]]
                        liney = [ymin, ymax]
                        ax[0].plot(linex,liney,'b--')
                        ax[1].plot(y,f2[:,xi], 'b')
                        ax[1].set_xlabel(b[0].capitalize() + lims_dict[b[0]]['units'],fontsize="large")
                        ax[1].set_ylabel('Fast-ion distribution',fontsize="large")
                    elif lout_flag[b[0]+b[1]][0] is not None:
                        # Y line out plots
                        fig, ax = plt.subplots(2,1,figsize=(4.8,9.6))
                        ax = ax.flatten()
                        linex = [xmin, xmax]
                        liney = [y[yi], y[yi]]
                        ax[0].plot(linex,liney,'b--')
                        ax[1].plot(x,f2[yi,:], 'b')
                        ax[1].set_xlabel(b[1].capitalize() + lims_dict[b[1]]['units'],fontsize="large")
                        ax[1].set_ylabel('Fast-ion distribution',fontsize="large")
                else:
                    fig, ax = plt.subplots(figsize=(4.8,4.8))
                    ax = np.array(ax)
                    ax = ax.flatten()
                # Contour plot
                c = ax[0].contourf(par_data[b[1]],par_data[b[0]],f2,15,cmap="inferno")
                ax[0].set_xlim(xmin,xmax)
                ax[0].set_ylim(ymin,ymax)
                ax[0].set_xlabel(b[1].capitalize() + lims_dict[b[1]]['units'],fontsize="large")
                ax[0].set_ylabel(b[0].capitalize() + lims_dict[b[0]]['units'],fontsize="large")
                ax[0].tick_params(direction="out",length=2)
                ax[0].set_title('Fast-ion distribution',fontsize=20)
                fig.canvas.set_window_title('Fast-ion distribution: '+b[0]+' vs. '+b[1])
                fig.colorbar(c,shrink=0.87,format='%0.2e', ax=ax[0])
                fig.tight_layout()

        # Fast-ion density
        r = dist["/r"].value
        z = dist["/z"].value
        if args.rzlineout is not None:
            ri = np.abs(r-args.rzlineout).argmin()       # R lineout index
        if args.zrlineout is not None:
            zi = np.abs(z-args.zrlineout).argmin()       # Z lineout index
        rmin, rmax = np.min(r),np.max(r)
        zmin, zmax = np.min(z),np.max(z)

        denf = dist["denf"].value
        denf_masked = np.ma.array(denf)
        denf_masked[mask < 0.5] = np.ma.masked
        if args.rzlineout is not None:
            # R line out plots
            fig, ax = plt.subplots(2,1,figsize=(4.8,9.6))
            ax = ax.flatten()
            linex = [r[ri], r[ri]]
            liney = [zmin, zmax]
            ax[0].plot(linex,liney,'b--')
            ax[1].plot(z,denf_masked[:,ri], 'b')
            ax[1].set_xlabel("Z (cm)",fontsize="large")
            ax[1].set_ylabel('Fast-ion Density (cm$^{-3}$)',fontsize="large")
        elif args.zrlineout is not None:
            # Z line out plots
            fig, ax = plt.subplots(2,1,figsize=(4.8,9.6))
            ax = ax.flatten()
            linex = [rmin, rmax]
            liney = [z[zi], z[zi]]
            ax[0].plot(linex,liney,'b--')
            ax[1].plot(r,denf_masked[zi,:], 'b')
            ax[1].set_xlabel("R (cm)",fontsize="large")
            ax[1].set_ylabel('Fast-ion Density (cm$^{-3}$)',fontsize="large")
        else:
            fig, ax = plt.subplots(figsize=(4.8,4.8))
            ax = np.array(ax)
            ax = ax.flatten()
        # Contour plot
        c = ax[0].contourf(r,z,denf_masked,15,cmap="inferno")
        ax[0].set_xlim(rmin,rmax)
        ax[0].set_ylim(zmin,zmax)
        ax[0].set_xlabel("R (cm)",fontsize="large")
        ax[0].set_ylabel("Z (cm)",fontsize="large")
        ax[0].tick_params(direction="out",length=2)
        ax[0].set_title('Fast-ion Density (cm$^{-3}$)',fontsize=20)
        fig.colorbar(c,shrink=0.87,format='%0.2e', ax=ax[0])
        fig.canvas.set_window_title('Fast-ion Density')
        fig.tight_layout()

    plt.show()

if __name__=='__main__':
    main()
