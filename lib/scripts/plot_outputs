#!/usr/bin/env python
import inspect

import os
import h5py
import argparse
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import (FormatStrFormatter, AutoMinorLocator,
        LogLocator, AutoLocator)

def extract_runid(f):
        return '_'.join(os.path.splitext(os.path.basename(f))[0].split("_")[0:-1])

def extract_file_type(f):
    return '_'.join(os.path.splitext(os.path.basename(f))[0].split("_")[-1::])

def plt_spectra(file_paths, fida=False, pfida=False, brems=False,
        cold=False, dcx=False, full=False, half=False, halo=False,
        third=False, plot_all=False, log=False,
        ac=False, lc=[], rc=[], xlim=[], ylim=[]):

    # Define and initialize arrays that will be used to extract and
    # store data
    label = ['fida', 'pfida', 'brems', 'cold', 'dcx', 'full', 'half',
            'third', 'halo']
    mask = [fida, pfida, brems, cold, dcx, full, half, third, halo]
    data_set = []
    lamb_set = []
    label_set = []

    # Read in spectra files and extract data
    for i in range(len(file_paths)):
        data = []
        l = []
        f = h5py.File(file_paths[i], 'r')
        lamb = f['lambda'].value
        lamb_set.append(lamb)
        if plot_all:
            for j in range(len(label)):
                data.append(f[label[j]])
                l.append(extract_runid(file_paths[i]) + '_' +
                        label[j])
        else:
            for k in range(len(mask)):
                if mask[k]:
                    data.append(f[label[k]])
                    l.append(extract_runid(file_paths[i]) + '_' +
                            label[k])
        data_set.append(data)
        label_set.append(l)

    # Define the list of channels to plot
    if ac:
        n_ch = data_set[0][0].value.shape[0]
        ch_i = range(data_set[0][0].value.shape[0])
        p = 3
    elif len(lc)>0:
        n_ch = len(lc)
        ch_i = np.array(lc)-1
    else:
        n_ch = rc[1] - rc[0] + 1
        ch_i = range(rc[0]-1,rc[1])
    if n_ch>9:
        p = 3
    else:
        p = np.ceil(np.sqrt(n_ch))

    # Plotting
    fig_count = 0
    for fi, ch_i2 in enumerate(ch_i):       # Channel Loop
        # Create number of figs
        mod_i = fi%9
        if mod_i==0:
            fig_count += 1
            if p==3:
                fig,ax = plt.subplots(3,3)
            elif p==2:
                fig,ax = plt.subplots(2,2)
            else:
                fig,ax = plt.subplots(1)
                ax = np.array(ax)
            fig.canvas.set_window_title('Spectral Plots '+str(fig_count))
            ax = ax.flatten()
            fig.set_size_inches(9,9)
            fig.text(0.5,0.02, 'Wavelength $(nm)$', ha='center', fontsize=12)
            fig.text(0.02,0.5, 'Radiance $(Ph\,s^{-1}\,nm^{-1}\,sr^{-1}\,m^{-2})$',
                    va='center', rotation='vertical', fontsize=12)
            leg_labels = []
            for i in range(len(label_set)):         # Labels for legend loops
                for j in range(len(label_set[i])):
                    leg_labels.append(label_set[i][j])

        # Handle x axis ticks
        majorLocatorx = AutoLocator()
        minorLocatorx = AutoMinorLocator()
        majorFormatter = FormatStrFormatter('%d')
        ax[mod_i].xaxis.set_major_locator(majorLocatorx)
        ax[mod_i].xaxis.set_minor_locator(minorLocatorx)
        ax[mod_i].xaxis.set_major_formatter(majorFormatter)
        ax[mod_i].tick_params(axis='x', which='both', labelsize=10, direction='in',
                top=1)
        # Handle y axis ticks
        if log==1:
            ax[mod_i].set_yscale('log')
            minorLocatory = LogLocator(base=100.0,subs=(2.0,4.0,6.0,8.0,20.0,
                40.0,60.0,80.0),numticks=100)
            ax[mod_i].yaxis.set_minor_locator(minorLocatory)
        else:
            minorLocatory = AutoMinorLocator(5)
            ax[mod_i].yaxis.set_minor_locator(minorLocatory)
        ax[mod_i].tick_params(axis='y', which='both', labelsize=10, direction='in',
                right=1)

        # Create plot
        for i in range(len(file_paths)):
            for d in data_set[i]:
                #xmax = np.ceil(1.1*max(lamb_set[i]))
                #xmin = np.floor(0.9*min(lamb_set[i]))
                #ymax = np.ceil(1.1*max(d.value[ch_i2,:]))
                #ymin = ymax/10e6
                #ax[mod_i].set_xlim([xmin,xmax])
                #ax[mod_i].set_ylim([ymin,ymax])
                ax[mod_i].plot(lamb_set[i], d.value[ch_i2,:])

        # Override axes limits if the user requested it
        if len(xlim)==2:
            ax[mod_i].set_xlim(xlim)
        if len(ylim)==2:
            ax[mod_i].set_ylim(ylim)

        # Legends and titles
        subp_title = 'Ch. ' + str(ch_i2+1)
        ax[mod_i].set_title(subp_title, loc='right', fontsize=10)
        fig.legend(leg_labels, loc=9, ncol=6)
    return plt.show()
    #return 

def plt_npa(file_paths, flux=False, pflux=False, plot_all=False,
        ac=False, lc=[], rc=[], log=False, xlim=[], ylim=[]):
    
    # Define and initialize arrays that will be used to extract and
    # store data
    label = ['flux', 'pflux']
    mask = [flux, pflux]
    data_set = []
    energy_set = []
    label_set = []

    # Read in NPA files and extract data
    for i in range(len(file_paths)):
        data = []
        l = []
        f = h5py.File(file_paths[i], 'r')
        energy = f['energy'].value
        energy_set.append(energy)
        if plot_all:
            for j in range(len(label)):
                data.append(f[label[j]])
                l.append(extract_runid(file_paths[i]) + '_' +
                        label[j])
        else:
            for k in range(len(mask)):
                if mask[k]:
                    data.append(f[label[k]])
                    l.append(extract_runid(file_paths[i]) + '_' +
                            label[k])
        data_set.append(data)
        label_set.append(l)

    # Define the list of channels to plot
    if ac:
        n_ch = data_set[0][0].value.shape[0]
        ch_i = range(data_set[0][0].value.shape[0])
    elif len(lc)>0:
        n_ch = len(lc)
        ch_i = np.array(lc)-1
    else:
        n_ch = rc[1] - rc[0] + 1
        ch_i = range(rc[0]-1,rc[1])

    # Plotting
    fig_count = 0
    for fi, ch_i2 in enumerate(ch_i):           # Channel Loop
        # Create number of figs
        mod_i = fi%9
        if mod_i==0:
            fig_count += 1
            fig,ax = plt.subplots(3,3)
            fig.canvas.set_window_title('NPA Plots '+str(fig_count))
            ax = ax.flatten()
            fig.set_size_inches(11,9)
            fig.text(0.5,0.02, 'Energy $(keV)$', ha='center', fontsize=12)
            fig.text(0.02,0.5, 'Flux $(neutrals\,s^{-1}\,dE^{-1})$',
                    va='center', rotation='vertical', fontsize=12)
            leg_labels = []
            for i in range(len(label_set)):         # Labels for legends loops
                for j in range(len(label_set[i])):
                    leg_labels.append(label_set[i][j])

        # Handle x axis ticks
        majorLocatorx = AutoLocator()
        minorLocatorx = AutoMinorLocator()
        majorFormatter = FormatStrFormatter('%d')
        ax[mod_i].xaxis.set_major_locator(majorLocatorx)
        ax[mod_i].xaxis.set_minor_locator(minorLocatorx)
        ax[mod_i].xaxis.set_major_formatter(majorFormatter)
        ax[mod_i].tick_params(axis='x', which='both', labelsize=10, direction='in',
                top=1)
        # Handle y axis ticks
        if log==1:
            ax[mod_i].set_yscale('log')
            minorLocatory = LogLocator(base=10.0,subs=(2.0,3.0,4.0,5.0,6.0,7.0,
                8.0,9.0), numticks=100)
            ax[mod_i].yaxis.set_minor_locator(minorLocatory)
        else:
            minorLocatory = AutoMinorLocator(5)
            ax[mod_i].yaxis.set_minor_locator(minorLocatory)
        ax[mod_i].tick_params(axis='y', which='both', labelsize=10, direction='in',
                right=1)

        # Legends and titles
        subp_title = 'Ch. ' + str(ch_i2+1)
        ax[mod_i].set_title(subp_title, loc='right', fontsize=10)
        fig.legend(leg_labels, loc=9, ncol=int(len(leg_labels)/len(file_paths)))

        # Create plots
        for i in range(len(file_paths)):
            for d in data_set[i]:
                ax[mod_i].plot(energy_set[i], d.value[ch_i2,:])
        # Override axes limits if the user requested it
        if len(xlim)==2:
            ax[mod_i].set_xlim(xlim)
        if len(ylim)==2:
            ax[mod_i].set_ylim(ylim)
    return plt.show()

def get_neutron_rate(file_paths):

    data_set = []
    label_set = []

    # Read in spectra files and extract data
    for i in range(len(file_paths)):
        f = h5py.File(file_paths[i], 'r')
        rate = f['rate'].value
        data_set.append(rate)
        label_set.append(extract_runid(file_paths[i]) + ' neutron rate') 
        print(label_set[i], ' = ', rate)
    return label_set[0],'/',label_set[1],' = ',data_set[0]/data_set[1]

def main():
    parser = argparse.ArgumentParser(description="Plots FIDASIM outputs")

    parser.add_argument('-files', type=str,
                        default = [], nargs='+',
                        help='Full filepath')
    parser.add_argument('-fida',
                        default = False, action='store_true',
                        help='Plot active FIDA')
    parser.add_argument('-pfida',
                        default = False, action='store_true',
                        help='Plot passive FIDA')
    parser.add_argument('-brems',
                        default = False, action='store_true',
                        help='Plot Bremsstrahlung')
    parser.add_argument('-cold',
                        default = False, action='store_true',
                        help='Plot cold neutral emission')
    parser.add_argument('-dcx',
                        default = False, action='store_true',
                        help='Plot DCX with thermal ions')
    parser.add_argument('-full',
                        default = False, action='store_true',
                        help='Plot the full energy component of the beam emission')
    parser.add_argument('-half',
                        default = False, action='store_true',
                        help='Plot the half energy component of the beam emission')
    parser.add_argument('-third',
                        default = False, action='store_true',
                        help='Plot the third energy component of the beam emission')
    parser.add_argument('-flux',
                        default = False, action='store_true',
                        help='Plot the active NPA flux')
    parser.add_argument('-pflux',
                        default = False, action='store_true',
                        help='Plot the passive NPA flux')
    parser.add_argument('-halo',
                        default = False, action='store_true',
                        help='Plot the halo beam emission')
    parser.add_argument('-plot_all',
                        default = False, action='store_true',
                        help='Plot all spectra')
    parser.add_argument('-log',
                        default = False, action='store_true',
                        help='Plot the y axis on a log scale')
    parser.add_argument('-ac', 
                        default = False, action='store_true',
                        help='Plot all channels')
    parser.add_argument('-lc', type=int,
                        default = [], nargs='+',
                        help='Plot list of channels')
    parser.add_argument('-rc', type=int,
                        default = [], nargs='+',
                        help='Plot range of channels, e.g., 1 3')
    parser.add_argument('-xlim', type=float,
                        default = [], nargs='+',
                        help='Set the wavelength axis limits, e.g., 600 700')
    parser.add_argument('-ylim', type=float,
                        default = [], nargs='+',
                        help='Set the radiance axis limits, e.g., 10e6 10e11')

    args = parser.parse_args()

    spec_to_plot = []
    npa_to_plot = []
    neut_to_print = []
    for i in range(len(args.files)):
        if extract_file_type(args.files[i])=='spectra':
            spec_to_plot.append(args.files[i])

        if extract_file_type(args.files[i])=='npa':
            npa_to_plot.append(args.files[i])

        if extract_file_type(args.files[i])=='neutrons':
            neut_to_print.append(args.files[i])

    if len(spec_to_plot)>0:
        plt_spectra(spec_to_plot, fida=args.fida, pfida=args.pfida, brems=args.brems, cold=args.cold, dcx=args.dcx, full=args.full, half=args.half, halo=args.halo, third=args.third, plot_all=args.plot_all, log=args.log, ac=args.ac, lc=args.lc, rc=args.rc, xlim=args.xlim, ylim=args.ylim)

    if len(npa_to_plot)>0:
        plt_npa(npa_to_plot, flux=args.flux, pflux=args.pflux, plot_all=args.plot_all, log=args.log, ac=args.ac, lc=args.lc, rc=args.rc, xlim=args.xlim, ylim=args.ylim)

if __name__=='__main__':
    main()
