#!/bin/sh
"exec" "$FIDASIM_DIR/deps/python" "$0" "$@"

import os
import re
import h5py
import argparse
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import (AutoMinorLocator, LogLocator, MultipleLocator, MaxNLocator)
from fidasim import utils as ut

# Define some functions that are called by the main functions below
def extract_runid(f):
        return '_'.join(os.path.splitext(os.path.basename(f))[0].split("_")[0:-1])

def extract_file_type(f):
    return '_'.join(os.path.splitext(os.path.basename(f))[0].split("_")[-1::])

def get_file_paths(file_path):
    #+ Returns a 3 element list corresponding to files of type string for spectra, npa and neutron
    #+
    #+ Example input:
    #+ file_path = ['tcv_spectra.h5', '2000_npa.h5', '3200_npa.h5', 'mast_neutrons.h5']
    #+
    #+ Example return:
    #+ [['tcv_spectra.h5'], ['2000_npa.h5', '3200_npa.h5'], ['mast_neutrons.h5']]

    spec, npa ,neut = [], [], []
    fpaths = [spec, npa, neut]
    plot_mask = ['spectra', 'npa', 'neutrons']
    for f in file_path:
        plot_type = extract_file_type(f)
        ind = plot_mask.index(plot_type)
        fpaths[ind].append(f)
    return fpaths

def get_colors(all_data):
    #+ Given all the spectra data, return the colors for plotting
    #+ Note: Reshape at the end is to match for loops in the plot_spectra and plot_npa
    Nfiles, Nspectra = all_data.shape[:2]
    Ncolors = Nfiles * Nspectra

    colors = np.zeros((Ncolors, 4)) # Color maps are defined with 4 elements
    cmap = plt.cm.tab10(np.linspace(0,1,11)[:9]) # Remove turquoise
    for i in range(Ncolors):
        colors[i] = cmap[i%9]

    return colors.reshape(Nfiles, Nspectra, 4)

def get_figure_parameters(ac, lc, rc, all_data):
    #+ Returns some figure parameters
    #+ Nch is number of channels
    #+ ich is channel indices to plot
    #+ subplot_dim is the `figure` square side length in `subplot` units

    # Define the list of channels to plot
    if ac:
        Nch = all_data.shape[2]
        ich = range(Nch)
    elif len(lc)>0:
        Nch = len(lc)
        ich = np.asarray(lc)-1
    else:
        Nch = rc[1]-rc[0] + 1
        ich = range(rc[0]-1, rc[1])

    # Define square dimensions of figures
    if Nch > 9:
        subplot_dim = 3
    else:
        subplot_dim = np.ceil(np.sqrt(Nch))

    return Nch, ich, subplot_dim

def check_shape(all_data):
    #+ Checks to see if all files have the same number of channels

    # Make sure all spectra data has the same shape
    n_dataf = np.zeros_like(all_data)
    for i,d in enumerate(all_data):
        n_dataf[i] = d[0].shape[0]
    if not (n_dataf==n_dataf[0]).all():
        print('ERROR: Number of channels is not constant across spectra files: %s' % str(n_dataf))
        raise SystemExit
    return

def get_extra_dim(subplot_dim):
    #+ Some figures use a column of subplots for the legend
    #+ This function returns the extended dimensions of that figure
    #+ Note: This is used in the check to determine which ticks to hide

    if subplot_dim==3: # 3x3 plot
        extra_dim = 2
    elif subplot_dim==2: # 2x2 plot
        extra_dim = 1
    else:
        extra_dim = 0
    return extra_dim

def increase_imod(subplot_dim, imod):
    #+ Increas imod to the next row in order to leave the last column of the figure available for the legend
    if subplot_dim==3: # 3x3 plot
        if 6<=imod<=8: imod += 2
        if 3<=imod<=5: imod += 1
    if subplot_dim==2: # 2x2 plot
        if 2<=imod: imod += 1
    return imod

def get_data(fpath, mask, plot_all, lc, rc, data_types, it=0):
    #+ fpath contains list of files
    #+ mask contains flags for what the user would like to plot
    #+ plot_all is the flag to plot all data_types
    #+ data_types is a list of strings containing the names of all FIDASIM spectral or npa types
    sflag, nflag = False, False
    if 'fida' in data_types: sflag = True
    if 'flux' in data_types: nflag = True

    spectra_dep_on_species = np.array(['cold', 'dcx', 'halo']) #Dependent on thermal (H1, H2 or H3)
    species_error = False
    all_data, all_xdata, all_data_labels = [], [], []
    # Read in spectra and extract data
    for i,fp in enumerate(fpath):            # Loop over spectra files
        f = h5py.File(fp, 'r')               # Read hdf5 file
        if sflag: all_xdata.append( f['lambda'][()] )
        if nflag: all_xdata.append( f['energy'][()] )

        spectra, spec_label = [], []         # Initialize empty lists for spectra and labels of the GIVEN file
        if plot_all:  # All spectra
            for st in data_types:
                try:
                    if st in spectra_dep_on_species: #Account for species mix
                        if (it+1) > f[st][()].shape[0]:
                            species_error = True
                        else:
                            ut.info(f'Using thermal species index {it} for {st} data in {os.path.basename(fp)}')
                        spectra.append( f[st][()][it] )
                    else:
                        spectra.append( f[st][()] )
                    spec_label.append( extract_runid(fp) + ' %s' % st )
                except:
                    if sflag: ut.warn('%s not in %s_spectra.h5' % (st, extract_runid(fp)))
                    if nflag: ut.warn('%s not in %s_npa.h5' % (st, extract_runid(fp)))
                    pass

        else:         # User defined spectra from mask
            for j,ma in enumerate(mask):
                if ma:
                    try:
                        if data_types[j] in spectra_dep_on_species: #Account for species mix
                            if (it+1) > f[data_types[j]][()].shape[0]:
                                species_error = True
                            else:
                                ut.info(f'Using thermal species index {it} for {data_types[j]} data in {os.path.basename(fp)}')
                            spectra.append( f[data_types[j]][()][it] )
                        else:
                            spectra.append( f[data_types[j]][()] )
                        spec_label.append( extract_runid(fp) + ' %s' % data_types[j] )
                    except:
                        if sflag: ut.warn('%s not in %s_spectra.h5'%(data_types[j], extract_runid(fp)))
                        if nflag: ut.warn('%s not in %s_npa.h5' % (data_types[j], extract_runid(fp)))
                        pass

        if species_error:
            ut.error(f'Thermal species index is too large')
            raise SystemExit

        spectra = np.asarray(spectra)
        all_data.append(spectra)
        all_data_labels.append(spec_label)

    all_data = np.asarray(all_data)               # (Nfiles, Nspectra, Nchannels, Nlambda)
    all_xdata = np.asarray(all_xdata)             # (Nfiles, Nlambda)
    all_data_labels = np.asarray(all_data_labels) # (Nfiles, Nspectra)

    check_shape(all_data) #Error check
    check_channel_list(lc, rc, all_data.shape[2], sflag, nflag)

    return all_data, all_xdata, all_data_labels

def check_channel_list(lc, rc, Nch, sflag, nflag):
    #+ Check the last channel number
    if len(lc)>0 and max(lc)>Nch:
        if sflag: print('ERROR: Highest spectral channel is %s and the user input %s' % (Nch, max(lc)))
        if nflag: print('ERROR: Highest NPA channel is %s and the user input %s' % (Nch, max(lc)))
        raise SystemExit

    if len(rc)>0 and max(rc)>Nch:
        if sflag: print('ERROR: Highest spectral channel is %s and the user input %s' % (Nch, max(rc)))
        if nflag: print('ERROR: Highest NPA channel is %s and the user input %s' % (Nch, max(rc)))
        raise SystemExit
    return

def get_ileg_label_pos(subplot_dim):
    if subplot_dim==3: ileg, xy, xx, yx = 3, 0.064, 0.415, 0.06
    if subplot_dim==2: ileg, xy, xx, yx = 2, 0.05, 0.37, 0.04
    if subplot_dim==1: ileg, xy, xx, yx = None, None, None, None
    return ileg, xy, xx, yx

def get_labelsize(subplot_dim):
    if subplot_dim==3: labelsize = 11
    if subplot_dim==2: labelsize = 12
    if subplot_dim==1: labelsize = 13
    return labelsize

def check_inputs(fpath, mask, plot_all, ac, rc, lc, xlim, ylim, data_types):
    sflag, nflag = False, False
    if 'fida' in data_types: sflag = True
    if 'flux' in data_types: nflag = True

    if np.count_nonzero(mask)>0 and plot_all:
        if sflag: print('ERROR: -s/--spectra and %s are both on... remove one argument' % spec_types[mask])
        if nflag: print('ERROR: -n/--npa and %s are both on... remove one argument' % spec_types[mask])
        raise SystemExit

    if (len(rc)>0) and (rc[0]>=rc[1]):
        if sflag: print('ERROR: Convention for -rs/--rangeschan is -rs min max, where min does not equal max')
        if nflag: print('ERROR: Convention for -rn/--rangenchan is -rn min max, where min does not equal max')
        raise SystemExit

    if np.array((len(lc)>0, len(rc)>0, ac)).sum() > 1:
        if sflag: print('ERROR: Cannot simultaneously define -as, -ls or -rs... pick only one')
        if nflag: print('ERROR: Cannot simultaneously define -an, -ln or -rn... pick only one')
        raise SystemExit

    if len(lc)==0 and len(rc)==0 and not ac:
        if sflag:
            print('ERROR: Spectral channel information not provided. Use -as, -ls or -rs\n       Files found:')
            [print('       %s' % f) for f in fpath]
        if nflag:
            print('ERROR: NPA channel information not provided. Use -an, -ln or -rn\n       Files found:')
            [print('       %s' % f) for f in fpath]
        raise SystemExit

    if (mask.sum()+plot_all)==0:
        if sflag: print('ERROR: No spectral switches are defined')
        if nflag: print('ERROR: No NPA switches are defined')
        raise SystemExit

    if (len(xlim)>0) and (xlim[0]>=xlim[1]):
        if sflag: print('ERROR: Convention for -sx/--sxlim is -sx smin smax, where smin does not equal smax')
        if nflag: print('ERROR: Convention for -nx/--nxlim is -nx nmin nmax, where nmin does not equal nmax')
        raise SystemExit

    if (len(ylim)>0) and (ylim[0]>=ylim[1]):
        if sflag: print('ERROR: Convention for -sy/--sylim is -sy smin smax, where smin does not equal smax')
        if nflag: print('ERROR: Convention for -ny/--nylim is -ny nmin nmax, where nmin does not equal nmax')
        raise SystemExit

    return

def check_files(directory, path, runids):
    if path!=None and directory!=None:
        print('ERROR: -d/--directory and -p/--path arguments were both provided... choose one')
        raise SystemExit

    if path!=None and runids!=None:
        print('ERROR: -r/--runids can only be used with -d/--directory')
        raise SystemExit
    return


def plot_spectra(fpath, savespectra, mask, plot_all=False, ac=False, lc=[], rc=[], log=False, xlim=[], ylim=[], it=0):
    spec_types = np.array(['fida', 'pfida', 'brems', 'cold', 'dcx', 'full', 'half', 'third', 'halo'])
    check_inputs(fpath, mask, plot_all, ac, rc, lc, xlim, ylim, spec_types) #Error check

    # Plotting
    all_spectra, all_lambda, all_spec_labels = get_data(fpath, mask, plot_all, lc, rc, spec_types, it=it)
    cnt_fig = 0
    Nch, ich, subplot_dim = get_figure_parameters(ac, lc, rc, all_spectra)
    colors = get_colors(all_spectra)
    for ifig, jch in enumerate(ich):           # Channel Loop
        imod = ifig%9
        if imod==0:
            cnt_fig += 1
            if subplot_dim==3:
                fig,ax = plt.subplots(3,4,figsize=(12,9))
            elif subplot_dim==2:
                fig,ax = plt.subplots(2,3,figsize=(10.5,7))
            else:
                fig,ax = plt.subplots(1,figsize=(6,6))
                ax = np.array(ax)
            ax = ax.flatten()
            fig.canvas.set_window_title('Spectral Plots %s' % str(cnt_fig))

            # Labels
            ileg, xy, xx, yx = get_ileg_label_pos(subplot_dim)
            if subplot_dim>1:
                fig.text(xx, yx, "Wavelength [nm]", ha='center', fontsize=18)
                fig.text(xy, 0.5, "Radiance [Ph s$^{-1}$ nm$^{-1}$ sr$^{-1}$ m$^{-2}$]", va='center',
                         rotation='vertical', fontsize=18)
            else:
                ax[0].set_xlabel("Wavelength [nm]", fontsize=18)
                ax[0].set_ylabel("Radiance [Ph s$^{-1}$ nm$^{-1}$ sr$^{-1}$ m$^{-2}$]", fontsize=18)

        # Leave final column of figure empty for legend
        imod = increase_imod(subplot_dim, imod)
        if subplot_dim==3: [ax[i].set_axis_off() for i in [3, 7, 11]]
        if subplot_dim==2: [ax[i].set_axis_off() for i in [2, 5]]

        # Plot
        ax[imod].set_title('Ch. %s'%str(jch+1), loc='right', fontsize=11, pad=0)
        for i in range(all_spectra.shape[0]):
            for d,data in enumerate(all_spectra[i]):
                ax[imod].plot(all_lambda[i], data[jch],label=all_spec_labels[i,d], color=colors[i,d])
                #Set y limits on subplots where all data is zero to avoid lots of digits on the y axis
                if np.isclose(all_spectra[i,:,jch,:].sum(), 0): ax[imod].set_ylim([0, np.max(all_spectra)])

        # Legends
        handles, labels = ax[imod].get_legend_handles_labels()
        if Nch==1: #Place legend inside axes when only one subplot is desired
            leg = ax[imod].legend(handles, labels)
        else:
            leg = ax[ileg].legend(handles, labels, loc='upper left', ncol=1)
        [line.set_linewidth(4.0) for line in leg.get_lines()]

        # Handle x axis ticks
        labelsize = get_labelsize(subplot_dim)
        ax[imod].xaxis.set_minor_locator(MultipleLocator(1))
        ax[imod].xaxis.set_major_locator(MaxNLocator(5, prune='both'))
        ax[imod].tick_params(axis='both', which='both', top=1, direction='in')
        ax[imod].tick_params(axis='both', which='major', labelsize=labelsize, length=4)

        # Handle y axis ticks
        if log==1:
            ax[imod].set_yscale('log')
            minLocatorY = LogLocator(base=100.0, subs=(2.0,4.0,6.0,8.0,20.0,40.0,60.0,80.0))
        else:
            minLocatorY = AutoMinorLocator(5)
            ax[imod].ticklabel_format(style='sci', axis='y', useMathText=True)
            ax[imod].set_ylim(ymin=0)
        ax[imod].yaxis.set_minor_locator(minLocatorY)
        ax[imod].yaxis.set_major_locator(MaxNLocator(5, integer=True))
        ax[imod].tick_params(axis='y', which='both', labelsize=labelsize, direction='in',right=1)

        # Define x and y axis limits
        if len(xlim)==2: ax[imod].set_xlim(xlim)
        if len(ylim)==2: ax[imod].set_ylim(ylim)

        #Save
        if len(savespectra)>0: plt.savefig(savespectra+ 'spectra%s' % str(cnt_fig))

    # Hide ticks for unused subplots
    extra_dim = get_extra_dim(subplot_dim)
    if imod!=(subplot_dim*subplot_dim-1+extra_dim): #Triggered when imod is not the final index of ax
        for i in range(int(imod+1), int(subplot_dim*subplot_dim+extra_dim)):
            ax[i].xaxis.set_ticks([])
            ax[i].yaxis.set_ticks([])

    return

def plot_npa(fpath, savenpa, mask, plot_all=False, ac=False, lc=[], rc=[], log=False, xlim=[], ylim=[]):
    npa_types = np.array(['flux', 'pflux'])
    check_inputs(fpath, mask, plot_all, ac, rc, lc, xlim, ylim, npa_types)  #Error check

    # Plotting
    all_npa, all_energy, all_npa_labels = get_data(fpath, mask, plot_all, lc, rc, npa_types)
    cnt_fig = 0
    Nch, ich, subplot_dim = get_figure_parameters(ac, lc, rc, all_npa)
    colors = get_colors(all_npa)
    for ifig, jch in enumerate(ich):           # Channel Loop
        imod = ifig%9
        if imod==0:
            cnt_fig += 1
            if subplot_dim==3:
                fig,ax = plt.subplots(3,4,figsize=(12,9))
            elif subplot_dim==2:
                fig,ax = plt.subplots(2,3,figsize=(10.5,7))
            else:
                fig,ax = plt.subplots(1,figsize=(6,6))
                ax = np.array(ax)
            ax = ax.flatten()
            fig.canvas.set_window_title('NPA Plots %s' % str(cnt_fig))

            # Labels
            ileg, xy, xx, yx = get_ileg_label_pos(subplot_dim)
            if subplot_dim>1:
                fig.text(xx, yx, "Energy [keV]", ha='center', fontsize=18)
                fig.text(xy, 0.5, "Flux [neutrals s$^{-1}$ dE$^{-1}$]", va='center',
                         rotation='vertical', fontsize=18)
            else:
                ax[0].set_xlabel("Energy [keV]", fontsize=18)
                ax[0].set_ylabel("Flux [neutrals s$^{-1}$ dE$^{-1}$]", fontsize=18)

        # Leave final column of figure empty for legend
        imod = increase_imod(subplot_dim, imod)
        if subplot_dim==3: [ax[i].set_axis_off() for i in [3, 7, 11]]
        if subplot_dim==2: [ax[i].set_axis_off() for i in [2, 5]]

        # Plot
        ax[imod].set_title('Ch. %s'%str(jch+1), loc='right', fontsize=11, pad=0)
        for i in range(all_npa.shape[0]):
            for d,data in enumerate(all_npa[i]):
                ax[imod].plot(all_energy[i], data[jch],label=all_npa_labels[i,d], color=colors[i,d])
                #Set y limits on subplots where all data is zero to avoid lots of digits on the y axis
                if np.isclose(all_npa[i,:,jch,:].sum(), 0): ax[imod].set_ylim([0, np.max(all_npa)])

        # Legends
        handles, labels = ax[imod].get_legend_handles_labels()
        if Nch==1: #Place legend inside axes when only one subplot is desired
            leg = ax[imod].legend(handles, labels)
        else:
            leg = ax[ileg].legend(handles, labels, loc='upper left', ncol=1)
        [line.set_linewidth(4.0) for line in leg.get_lines()]

        # Handle x axis ticks
        labelsize = get_labelsize(subplot_dim)
        ax[imod].xaxis.set_minor_locator(MultipleLocator(5))
        ax[imod].xaxis.set_major_locator(MaxNLocator(5, prune='both'))
        ax[imod].tick_params(axis='both', which='both', top=1, direction='in')
        ax[imod].tick_params(axis='both', which='major', labelsize=labelsize, length=4)

        # Handle y axis ticks
        if log==1:
            ax[imod].set_yscale('log')
            minLocatorY = LogLocator(base=10.0, subs=(2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0), numticks=100)
        else:
            minLocatorY = AutoMinorLocator(5)
            ax[imod].ticklabel_format(style='sci', axis='y', useMathText=True)
            ax[imod].set_ylim(ymin=0)
        ax[imod].yaxis.set_minor_locator(minLocatorY)
        ax[imod].yaxis.set_major_locator(MaxNLocator(5, integer=True))
        ax[imod].tick_params(axis='y', which='both', labelsize=labelsize, direction='in',right=1)

        # Define x and y axis limits
        if len(xlim)==2: ax[imod].set_xlim(xlim)
        if len(ylim)==2: ax[imod].set_ylim(ylim)

        #Save
        if len(savenpa)>0: plt.savefig(savenpa+ 'npa%s' % str(cnt_fig))

    # Hide ticks for unused subplots
    extra_dim = get_extra_dim(subplot_dim)
    if imod!=(subplot_dim*subplot_dim-1+extra_dim): #Triggered when imod is not the final index of ax
        for i in range(int(imod+1), int(subplot_dim*subplot_dim+extra_dim)):
            ax[i].xaxis.set_ticks([])
            ax[i].yaxis.set_ticks([])

    return

def get_neutron_rate(fpath):
    #+ fpath is list of filenames
    print('\nNeutron rate(s):')
    N = len(fpath)
    data_neutron_set = np.empty(N)
    label_neutron_set = []
    for i in range(N):
        f = h5py.File(fpath[i], 'r')
        data_neutron_set[i] = f['rate'][()]
        label_neutron_set.append(extract_runid('%s neutron rate' % fpath[i]))
        print(label_neutron_set[i]+" = {:.2e}".format(data_neutron_set[i])+' neutrons/s')
    return

def main():
    parser = argparse.ArgumentParser(description="Plots FIDASIM outputs")
    parser.add_argument('-d', '--directory', type=str,
                        help='Single folder where your file(s) are located')
    parser.add_argument('-r','--runids',
                        nargs='+',
                        help = 'Picks out run IDs within the -d/--directory folder')
    parser.add_argument('-p', '--path', type=str,
                        nargs='+',
                        help='Indicates full filepath(s)')
    parser.add_argument('-fi', '--fida',
                        default = False, action='store_true',
                        help='Active FIDA')
    parser.add_argument('-pf', '--pfida',
                        default = False, action='store_true',
                        help='Passive FIDA')
    parser.add_argument('-b', '--brems',
                        default = False, action='store_true',
                        help='Bremsstrahlung')
    parser.add_argument('-c', '--cold',
                        default = False, action='store_true',
                        help='Cold D-alpha')
    parser.add_argument('-dc', '--dcx',
                        default = False, action='store_true',
                        help='Thermal ion direct charge exchange')
    parser.add_argument('-f', '--full',
                        default = False, action='store_true',
                        help='Full energy component of beam emission')
    parser.add_argument('-hf', '--half',
                        default = False, action='store_true',
                        help='Half energy component of beam emission')
    parser.add_argument('-t', '--third',
                        default = False, action='store_true',
                        help='Third energy component of beam emission')
    parser.add_argument('-hl', '--halo',
                        default = False, action='store_true',
                        help='Halo')
    parser.add_argument('-it', '--ithermal_species', type=int,
                        default = 0,
                        help='Index for data that is dependent on thermal species (H1, H2 or H3)')
    parser.add_argument('-s', '--spectra',
                        default = False, action='store_true',
                        help='All spectra light')
    parser.add_argument('-as', '--allschan',
                        default = False, action='store_true',
                        help='All spectra channels')
    parser.add_argument('-ls', '--listschan', type=int,
                        default = [], nargs='+',
                        help='List of spectra channels')
    parser.add_argument('-rs', '--rangeschan', type=int,
                        default = [], nargs='+',
                        help='Range of spectra channels')
    parser.add_argument('-sx', '--sxlim', type=float,
                        default = [], nargs='+',
                        help='Set the wavelength axis limits')
    parser.add_argument('-sy', '--sylim', type=float,
                        default = [], nargs='+',
                        help='Set the radiance axis limits')
    parser.add_argument('-sl', '--slog',
                        default = False, action='store_true',
                        help='Set the radiance axis to a log scale')
    parser.add_argument('-os', '--onlyspectra',
                        default = False, action='store_true',
                        help='Only plot spectra related data')
    parser.add_argument('-ss','--savespectra',
                        default='', type=str,
                        help='Indicates the path where spectral plots will be saved')

    parser.add_argument('-np', '--activenpa',
                        default = False, action='store_true',
                        help='Active NPA')
    parser.add_argument('-pn', '--passivenpa',
                        default = False, action='store_true',
                        help='Passive NPA')
    parser.add_argument('-n', '--npa',
                        default = False, action='store_true',
                        help='All flux neutrals')
    parser.add_argument('-an', '--allnchan',
                        default = False, action='store_true',
                        help='All NPA channels')
    parser.add_argument('-ln', '--listnchan', type=int,
                        default = [], nargs='+',
                        help='List of NPA channels')
    parser.add_argument('-rn', '--rangenchan', type=int,
                        default = [], nargs='+',
                        help='Range of NPA channels')
    parser.add_argument('-nx', '--nxlim', type=float,
                        default = [], nargs='+',
                        help='Set the energy axis limits')
    parser.add_argument('-ny', '--nylim', type=float,
                        default = [], nargs='+',
                        help='Set the flux axis limits')
    parser.add_argument('-nl', '--nlog',
                        default = False, action='store_true',
                        help='Set the flux axis to a log scale')
    parser.add_argument('-on', '--onlynpa',
                        default = False, action='store_true',
                        help='Only plot NPA related data')
    parser.add_argument('-sn','--savenpa',
                        default='', type=str,
                        help='Indicates the path where NPA plots will be saved')

    args = parser.parse_args()

    check_files(args.directory, args.path, args.runids)

    ## Get fpaths from -d or -p input
    ## fpaths is [[spectra filename(s)], [npa filename(s)], [neutron filename(s)]]
    if args.directory!=None:
        fdir = os.path.abspath(args.directory)
        if os.path.isdir(fdir):
            files = [f for f in os.listdir(fdir) if os.path.isfile(f)]
            if args.runids!=None:
                fpaths = [[],[],[]]
                for r in args.runids:
                    # Grab spectra paths
                    spec_dir = os.path.join(fdir,r+'_spectra.h5')
                    if os.path.isfile(spec_dir) and not args.onlynpa:
                        fpaths[0].append(spec_dir)
                    else:
                        ut.info(spec_dir+' does not exist')
                    # Grab NPA paths
                    npa_dir = os.path.join(fdir,r+'_npa.h5')
                    if os.path.isfile(npa_dir) and not args.onlyspectra:
                        fpaths[1].append(npa_dir)
                    else:
                        ut.info(npa_dir+' does not exist')
                    # Grab neutrons paths
                    neutron_dir = os.path.join(fdir,r+'_neutrons.h5')
                    fpaths[2].append(neutron_dir)
            else:
                fpaths = []
                fpaths.append([fdir+'/'+ f for f in files if re.search('.*_spectra\.h5',f)])
                fpaths.append([fdir+'/'+ f for f in files if re.search('.*_npa\.h5',f)])
                fpaths.append([fdir+'/'+ f for f in files if re.search('.*_neutrons\.h5',f)])
        else:
            print('ERROR: %s is not a directory' % fdir)
            raise SystemExit

    if args.path!=None:
        for p in args.path:
            fdir = os.path.abspath(p)
            if not os.path.isfile(fdir):
                print('ERROR: %s does not exist' % fdir)
                raise SystemExit
        fpaths = get_file_paths(args.path)

    ## Call plotting functions
    if len(fpaths[0])>0 and not args.onlynpa:
        spec_flags = np.array([args.fida,args.pfida,args.brems,args.cold,args.dcx,args.full,args.half,args.third,
                               args.halo])
        plot_spectra(fpaths[0],args.savespectra,spec_flags,plot_all=args.spectra,
                     log=args.slog,ac=args.allschan,lc=args.listschan,rc=args.rangeschan,xlim=args.sxlim,
                     ylim=args.sylim,it=args.ithermal_species)

    if len(fpaths[1])>0 and not args.onlyspectra:
        npa_flags= np.array([args.activenpa, args.passivenpa])
        plot_npa(fpaths[1],args.savenpa,npa_flags,plot_all=args.npa,log=args.nlog,
                 ac=args.allnchan,lc=args.listnchan,rc=args.rangenchan,xlim=args.nxlim,ylim=args.nylim)

    if len(fpaths[2])>0 and not args.onlyspectra and not args.onlynpa:
        get_neutron_rate(fpaths[2])

    plt.show()

if __name__=='__main__':
    main()
