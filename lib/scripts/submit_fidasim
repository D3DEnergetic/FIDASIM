#!/usr/bin/env python

import argparse
import os
import re
import tempfile
import subprocess
from subprocess import call
import string
from os.path import dirname
from distutils.spawn import find_executable

def extract_runid(f):
    return '_'.join(os.path.splitext(os.path.basename(f))[0].split("_")[0:-1])

def chunk(lst,n):
    return [ lst[i::n] for i in range(n) if lst[i::n] ]

def pbs_omp_jobscript(args):
    if args['partition']:
        args['partition'] = '#PBS -q %(partition)s'%args

    if 'G' in args['mem']:
        args['mem'] = args['mem'].replace('G','gb')
    if 'M' in args['mem']:
        args['mem'] = args['mem'].replace('M','mb')

    job_script = """
                 #!/bin/bash
                 #PBS -N %(job_name)s
                 #PBS -l nodes=1:ppn=%(ntasks)s
                 #PBS -l mem=%(mem)s
                 #PBS -l walltime=%(walltime)s
                 #PBS -r n
                 %(partition)s
                 #PBS -V
                 #PBS -o /dev/null
                 #PBS -e /dev/null
                 %(directive)s

                 %(precall)s

                 ulimit -s unlimited

                 %(commands)s

                 %(postcall)s

                 exit
                 """%args

    job_script = "\n".join([line.lstrip() for line in job_script.splitlines()])
    return os.linesep.join([s for s in job_script.splitlines() if s])

def slurm_omp_jobscript(args):
    if args['partition']:
        args['partition'] = '#SBATCH -p %(partition)s'%args

    if 'gb' in args['mem'].lower():
        args['mem'] = args['mem'].lower().replace('gb','G')
    if 'mb' in args['mem'].lower():
        args['mem'] = args['mem'].lower().replace('mb','M')

    job_script = """
                 #!/bin/bash
                 #SBATCH -J %(job_name)s
                 #SBATCH -N 1
                 #SBATCH -n %(ntasks)s
                 #SBATCH --mem=%(mem)s
                 #SBATCH -t %(walltime)s
                 %(partition)s
                 #SBATCH -o /dev/null -e /dev/null
                 %(directive)s

                 %(precall)s

                 ulimit -s unlimited

                 %(commands)s

                 %(postcall)s

                 exit
                 """%args

    job_script = "\n".join([line.lstrip() for line in job_script.splitlines()])
    return os.linesep.join([s for s in job_script.splitlines() if s])

def pbs_mpi_jobscript(args):
    if args['partition']:
        args['partition'] = '#PBS -q %(partition)s'%args

    if 'G' in args['mem']:
        args['mem'] = args['mem'].replace('G','gb')
    if 'M' in args['mem']:
        args['mem'] = args['mem'].replace('M','mb')

    job_script = """
                 #!/bin/bash
                 #PBS -N %(job_name)s
                 #PBS -l nodes=%(ntasks)s
                 #PBS -l mem=%(mem)s
                 #PBS -l walltime=%(walltime)s
                 #PBS -r n
                 %(partition)s
                 #PBS -V
                 #PBS -o /dev/null
                 #PBS -e /dev/null
                 %(directive)s

                 %(precall)s

                 ulimit -s unlimited

                 cafrun -np %(ntasks) %(commands)s

                 %(postcall)s

                 exit
                 """%args

    job_script = "\n".join([line.lstrip() for line in job_script.splitlines()])
    return os.linesep.join([s for s in job_script.splitlines() if s])

def slurm_mpi_jobscript(args):
    if args['partition']:
        args['partition'] = '#SBATCH -p %(partition)s'%args

    if 'gb' in args['mem'].lower():
        args['mem'] = args['mem'].lower().replace('gb','G')
    if 'mb' in args['mem'].lower():
        args['mem'] = args['mem'].lower().replace('mb','M')

    job_script = """
                 #!/bin/bash
                 #SBATCH -J %(job_name)s
                 #SBATCH --ntasks=%(ntasks)s
                 #SBATCH --mem-per-cpu=%(mem)s
                 #SBATCH -t %(walltime)s
                 #SBATCH -o /dev/null -e /dev/null
                 %(partition)s
                 %(directive)s

                 %(precall)s

                 ulimit -s unlimited

                 cafrun -np %(ntasks)s %(commands)s

                 %(postcall)s

                 exit
                 """%args

    job_script = "\n".join([line.lstrip() for line in job_script.splitlines()])
    return os.linesep.join([s for s in job_script.splitlines() if s])

check_output = lambda args: subprocess.Popen(args, stdout = subprocess.PIPE).communicate()[0]

def is_mpi_executable(executable):
    ldd_out = check_output(['ldd',executable])

    libraries = {}
    for line in ldd_out.splitlines():
        match = re.match(r'\t(.*) => (.*) \(0x', line)
        if match:
            libraries[match.group(1)] = match.group(2)

    return any('libmpi' in s for s in libraries.keys())

def main():
    parser = argparse.ArgumentParser(description="Creates a FIDASIM job script and submits it to the resource manager")

    parser.add_argument('path',
                        help='Namelist file or result directory')
    parser.add_argument('-w','--walltime',
                        default = '2:00:00',
                        help = 'Set walltime. Defaults to 2:00:00')
    parser.add_argument('-n','--ntasks',
                        type=int, default = 16,
                        help = 'Set number of tasks. Defaults to 16')
    parser.add_argument('-p','--partition',
                        default = '',
                        help = 'Set partition/queue')
    parser.add_argument('-m','--memory',
                        default = '2G',
                        help = 'Set required memory per cpu in G or M. Defaults to 2G')
    executable = dirname(dirname(dirname(os.path.abspath(__file__))))+'/fidasim'
    parser.add_argument('-ex','--executable',
                        default = executable,
                        help = 'Set path to FIDASIM executable. Defaults to '+executable)
    parser.add_argument('-log',
                        default = '',
                        help = 'Set log directory. Defaults to result directory.')
    parser.add_argument('-r','--resource-manager',
                        default = 'slurm',
                        help = 'Set resource manager(Slurm|PBS)')
    parser.add_argument('-d','--directive',
                        action = 'append',
                        default = [],
                        help = 'Additional batch directives')
    parser.add_argument('-pre','--precall',
                        action = 'append',
                        default = [],
                        help = 'Command to run before code execution')
    parser.add_argument('-post','--postcall',
                        action = 'append',
                        default = [],
                        help = 'Command to run after code execution')
    parser.add_argument('-rids','--runids',
                        default = '',
                        nargs='+',
                        help = 'List of run ids, accepts regex')
    parser.add_argument('-j','--jobs',
                        type=int,default = 0,
                        help = 'Split runs into N jobs. Defaults to 1 job per namelist')
    parser.add_argument('-c','--clobber',
                        action = 'store_true',
                        help = 'Overwrite existing runs')
    parser.add_argument('--last-output',
                        default = 'spectra',
                        help=argparse.SUPPRESS)
    parser.add_argument('-v','--verbose',
                        action = 'store_true',
                        help = 'Verbose')
    parser.add_argument('-db','--debug',
                        action = 'store_true',
                        help = 'Debug mode. Does not submit job')

    args = parser.parse_args()

    rm_executable = find_executable('sbatch') or find_executable('qsub')
    if rm_executable:
        if 'sbatch' in rm_executable:
            rm = 'slurm'
        else:
            rm = 'pbs'
    else:
        rm = args.resource_manager.lower()
        if 'slurm' in rm:
            rm_executable = find_executable('sbatch')
        elif "pbs" in rm:
            rm_executable = find_executable('qsub')
        else:
            rm = ''
            rm_executable = ''

    if not rm:
        print('\033[91m'+'ERROR: Unknown resource manager. Expected Slurm or PBS.\033[0m')
        quit()

    if not rm_executable:
        print('\033[91m'+'ERROR: Resource manager executable (sbatch|qsub) not found\033[0m')
        quit()

    if args.verbose:
        print('Walltime: '+args.walltime)
        print('NTasks:    '+str(args.ntasks))
        print('Memory:   '+args.memory)

    fileordir = os.path.abspath(args.path)

    if not os.access(fileordir, os.W_OK):
        print('\033[91m'+'ERROR: You do not have write permissions in {}. Either change the permissions or move the input files into a new directory and edit the *_inputs.dat file accordingly.'.format(fileordir)+'\033[0m')
        quit()

    if not os.access(fileordir, os.R_OK):
        print('\033[91m'+'ERROR: You do not have read permissions in {}. Either change the permissions or move the input files into a new directory and edit the *_inputs.dat file accordingly.'.format(fileordir)+'\033[0m')
        quit()

    if os.path.isfile(fileordir):
        files=[fileordir]
    elif os.path.isdir(fileordir):
        allfiles = os.listdir(fileordir)
        if args.runids:
             files=[fileordir + '/' + f for f in allfiles for r in args.runids if re.search(r+'_inputs\.dat',f)]
        else:
             files=[fileordir+'/'+ f for f in allfiles if re.search('.*_inputs\.dat',f)]

        if not args.clobber:
            sfiles=[fileordir+'/'+ f for f in allfiles if re.search('.*_'+args.last_output+'\.(cdf|h5)',f)]
            frids = [extract_runid(f) for f in files]
            srids = [extract_runid(f) for f in sfiles]
            files = [fileordir+'/'+f+'_inputs.dat' for f in set(frids).difference(srids)]
            if not files:
                print('\033[94m'+'INFO: All runs have completed. Use -c option to overwrite runs.'+'\033[0m')
    else:
        raise IOError('Not a file or directory')

    if not args.jobs:
        jobs = chunk(files,len(files))
    else:
        jobs = chunk(files,args.jobs)

    for job in jobs:
        if not args.log:
            log_dir = dirname(job[0])
        else:
            log_dir = args.log

        output_files = [extract_runid(file)+".out" for file in job]

        args_dict =  {'commands':"\n".join([args.executable+" "+ z[0] +
                                 " >& "+log_dir+"/"+z[1] for z in zip(job,output_files)]),
                      'ntasks':str(args.ntasks),
                      'mem':args.memory,
                      'walltime':args.walltime,'partition':args.partition,
                      'directive':"\n".join(item for item in args.directive),
                      'precall':"\n".join(item for item in args.precall),
                      'postcall':"\n".join(item for item in args.postcall),
                      'job_name':os.path.basename(args.executable)}

        use_mpi = is_mpi_executable(args.executable)

        if 'slurm' in rm:
            if use_mpi:
                job_script = slurm_mpi_jobscript(args_dict)
            else:
                job_script = slurm_omp_jobscript(args_dict)
        else:
            if use_mpi:
                job_script = pbs_mpi_jobscript(args_dict)
            else:
                job_script = pbs_omp_jobscript(args_dict)

        if args.verbose:
            print('Submitting: \n\t'+'\n\t'.join(file for file in job))

        if not args.debug:
            tfile = tempfile.NamedTemporaryFile(mode='w+t',dir=os.path.expanduser("~"))
            tfile.file.write(job_script)
            tfile.file.close()
            call([rm_executable,tfile.name])
            tfile.close()
        else: print(job_script)

if __name__=='__main__':
    main()
